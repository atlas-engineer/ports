# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4

PortSystem          1.0
PortGroup           cmake 1.0

name                hedgewars
version             0.9.22
categories          games
platforms           darwin
license             GPL-2
maintainers         nomaintainer

description         Funny turn-based artillery game, featuring fighting Hedgehogs!
long_description    ${description}
homepage            https://www.hedgewars.org/

master_sites        http://download.gna.org/${name}/
use_bzip2           yes
distfiles           ${name}-src-${version}
worksrcdir          ${name}-src-${version}

checksums           md5     3718947ea69f57a76a3511678fb8173b \
                    sha1    53c2530df88c11297f3c1f6fc85a45f317644fe2 \
                    rmd160  359fd026643e69446121b94ba301646812353c19

cmake.out_of_source yes
                        
depends_build-append   port:fpc \
                       port:pkgconfig
                    
depends_lib-append  port:ffmpeg \
                    port:libsdl \
                    port:zlib \
                    port:libpng \
                    port:qt4-mac


# don't build the server unit by default as it has high-ish overhead (ghc, llvm-3.5)
configure.args-append -DNOSERVER=1

# we need to fully specify the location of the pascal compiler to the cmake build system
configure.args-append -DCMAKE_Pascal_COMPILER=${prefix}/lib/fpc/bin/fpc

# don't use the sparkle selfupdate mechanism
configure.args-append -DNOAUTOUPDATE=1

# don't include all support libraries in bundle
configure.args-append -DSKIPBUNDLE:BOOL=ON


# patch the sources to update to the current ffmpeg variable and procedure names
patchfiles-append   0001-avwrapper-avframealloc-fix.diff
patchfiles-append   0002-LibavInteraction-fix.diff

# ghc and llvm-3.5 are expensive to build so make them optional
variant server description "Add LAN server" {
    configure.args-replace -DNOSERVER=1 -DNOSERVER=0
    depends_build-append  port:ghc
}

cmake.install_prefix   ${destroot}${applications_dir}

# try this
# configure.args-append -DCMAKE_INSTALL_BINDIR="${destroot}${applications_dir}"

############### destroot problems ###############
# this port builds itself into a strange destroot location
# something like ${worksrcdir}${destroot}
# this problem doesn't seem to be an issue in the homebrew install script
# it's using the qt bundler script, but sending it a strange output location
# I can't seem to find the cmake variable or hard-coded script location needed to override it 
# to put it into ${destroot}${applications_dir} as usual...

# tried these things so far...

# tried to build into the applications directory as usual
# but this didn't work
# configure.args-append -DCMAKE_INSTALL_PREFIX:PATH="${destroot}${applications_dir}"

# tried turning this cpack variable back on to allow CMAKE_INSTALL_PREFIX to work
# see <https://cmake.org/cmake/help/v3.0/variable/CPACK_SET_DESTDIR.html>
# but this didn't work either
# configure.args-append -DCPACK_SET_DESTDIR:BOOL=ON

# tried to explicitly specify the output directory
# this didn't work either
# configure.args-append -DCMAKE_BINARY_DIR:PATH="${destroot}${applications_dir}"

# tried this - why not?
# didn't work, tho
# configure.args-append -DDATA_INSTALL_DIR=${destroot}${applications_dir}

# this didn't work either
# configure.args-append -DCPACK_PACKAGING_INSTALL_PREFIX:PATH="${destroot}${applications_dir}"

# this didn't work -- but perhaps I can get the string right to find the built app, tho
# destroot {
#    copy ${destroot}${worksrcpath}/../build/Hedgewars.app ${destroot}${applications_dir}/Hedgewars.app
#}

# yeah - well - to no great surprise. This didn't work either
# post-destroot {
#    copy ${destroot}${worksrcpath}/../build/Hedgewars.app ${destroot}${applications_dir}/Hedgewars.app
# }