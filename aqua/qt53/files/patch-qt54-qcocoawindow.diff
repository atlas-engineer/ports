--- src/plugins/platforms/cocoa/qcocoawindow.mm.orig	2019-04-14 21:09:11.000000000 -0700
+++ src/plugins/platforms/cocoa/qcocoawindow.mm	2019-04-14 21:38:50.000000000 -0700
@@ -82,6 +82,50 @@
     }
 }
 
+static void selectNextKeyWindow(NSWindow *currentKeyWindow)
+{
+    if (!currentKeyWindow)
+        return;
+
+    const QCocoaAutoReleasePool pool;
+
+    if ([[NSApplication sharedApplication] keyWindow] != currentKeyWindow)
+        return;//currentKeyWindow is not a key window actually.
+
+    NSArray *const windows = [[NSApplication sharedApplication] windows];
+    bool startLookup = false;
+    for (NSWindow *candidate in [windows reverseObjectEnumerator]) {
+        if (!startLookup) {
+            if (candidate == currentKeyWindow)
+                startLookup = true;
+        } else {
+            if ([candidate isVisible] && [candidate canBecomeKeyWindow]) {
+                [candidate makeKeyWindow];
+                break;
+            }
+        }
+    }
+}
+
+
+@interface NSWindow (CocoaWindowCategory)
+- (NSRect) legacyConvertRectFromScreen:(NSRect) rect;
+@end
+
+@implementation NSWindow (CocoaWindowCategory)
+- (NSRect) legacyConvertRectFromScreen:(NSRect) rect
+{
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+    return [self convertRectFromScreen: rect];
+#else
+    NSRect r = rect;
+    r.origin = [self convertScreenToBase:rect.origin];
+    return r;
+#endif
+}
+@end
+
+
 @implementation QNSWindowHelper
 
 @synthesize window = _window;
@@ -152,7 +196,7 @@
 
     if (pw && pw->frameStrutEventsEnabled() && isMouseEvent(theEvent)) {
         NSPoint loc = [theEvent locationInWindow];
-        NSRect windowFrame = [self.window convertRectFromScreen:[self.window frame]];
+        NSRect windowFrame = [self.window legacyConvertRectFromScreen:[self.window frame]];
         NSRect contentFrame = [[self.window contentView] frame];
         if (NSMouseInRect(loc, windowFrame, NO) &&
             !NSMouseInRect(loc, contentFrame, NO))
@@ -388,6 +432,7 @@
     } else {
         m_qtView = [[QNSView alloc] initWithQWindow:tlw platformWindow:this];
         m_contentView = m_qtView;
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
         // Enable high-dpi OpenGL for retina displays. Enabling has the side
         // effect that Cocoa will start calling glViewport(0, 0, width, height),
         // overriding any glViewport calls in application code. This is usually not a
@@ -398,6 +443,7 @@
                                                           "QT_MAC_WANTS_BEST_RESOLUTION_OPENGL_SURFACE");
             [m_contentView setWantsBestResolutionOpenGLSurface:enable];
         }
+#endif
         BOOL enable = qt_mac_resolveOption(NO, tlw, "_q_mac_wantsLayer",
                                                      "QT_MAC_WANTS_LAYER");
         [m_contentView setWantsLayer:enable];
@@ -471,8 +517,12 @@
     // of view. Embedded QWindows get global (screen) geometry.
     if (m_contentViewIsEmbedded) {
         NSPoint windowPoint = [m_contentView convertPoint:NSMakePoint(0, 0) toView:nil];
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
         NSRect screenRect = [[m_contentView window] convertRectToScreen:NSMakeRect(windowPoint.x, windowPoint.y, 1, 1)];
         NSPoint screenPoint = screenRect.origin;
+#else
+        NSPoint screenPoint = [[m_contentView window] convertBaseToScreen:windowPoint]; // ### use convertRectToScreen after 10.6 removal
+#endif
         QPoint position = qt_mac_flipPoint(screenPoint).toPoint();
         QSize size = qt_mac_toQRect([m_contentView bounds]).size();
         return QRect(position, size);
@@ -634,7 +684,10 @@
                 // Since this isn't a native popup, the window manager doesn't close the popup when you click outside
                 NSUInteger parentStyleMask = [parentCocoaWindow->m_nsWindow styleMask];
                 if ((m_resizableTransientParent = (parentStyleMask & NSResizableWindowMask))
-                    && !([parentCocoaWindow->m_nsWindow styleMask] & NSFullScreenWindowMask))
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+                    && !([parentCocoaWindow->m_nsWindow styleMask] & NSFullScreenWindowMask)
+#endif
+                    )
                     [parentCocoaWindow->m_nsWindow setStyleMask:parentStyleMask & ~NSResizableWindowMask];
             }
 
@@ -735,7 +788,10 @@
         if (parentCocoaWindow && window()->type() == Qt::Popup) {
             parentCocoaWindow->m_activePopupWindow = 0;
             if (m_resizableTransientParent
-                && !([parentCocoaWindow->m_nsWindow styleMask] & NSFullScreenWindowMask))
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+                && !([parentCocoaWindow->m_nsWindow styleMask] & NSFullScreenWindowMask)
+#endif                
+                )
                 // QTBUG-30266: a window should not be resizable while a transient popup is open
                 [parentCocoaWindow->m_nsWindow setStyleMask:[parentCocoaWindow->m_nsWindow styleMask] | NSResizableWindowMask];
         }
@@ -850,6 +906,7 @@
             setWindowTitle(window()->title());
         }
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
         Qt::WindowType type = window()->type();
         if ((type & Qt::Popup) != Qt::Popup && (type & Qt::Dialog) != Qt::Dialog) {
             NSWindowCollectionBehavior behavior = [m_nsWindow collectionBehavior];
@@ -859,6 +916,7 @@
                 behavior &= ~NSWindowCollectionBehaviorFullScreenPrimary;
             [m_nsWindow setCollectionBehavior:behavior];
         }
+#endif
         setWindowZoomButton(flags);
     }
 
@@ -1283,9 +1341,11 @@
         m_nsWindow.hasShadow = NO;
         m_nsWindow.level = NSNormalWindowLevel;
         NSWindowCollectionBehavior collectionBehavior =
-                NSWindowCollectionBehaviorManaged | NSWindowCollectionBehaviorIgnoresCycle
-                | NSWindowCollectionBehaviorFullScreenAuxiliary;
+                NSWindowCollectionBehaviorManaged | NSWindowCollectionBehaviorIgnoresCycle;
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+        collectionBehavior |= NSWindowCollectionBehaviorFullScreenAuxiliary;
         m_nsWindow.animationBehavior = NSWindowAnimationBehaviorNone;
+#endif
         m_nsWindow.collectionBehavior = collectionBehavior;
         setCocoaGeometry(window()->geometry());
 
@@ -1383,11 +1443,13 @@
                                       !(showWithoutActivating.isValid() && showWithoutActivating.toBool());
         [window setHidesOnDeactivate: shouldHideOnDeactivate];
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
         // Make popup windows show on the same desktop as the parent full-screen window.
         [window setCollectionBehavior:NSWindowCollectionBehaviorFullScreenAuxiliary];
         if ((type & Qt::Popup) == Qt::Popup)
             [window setAnimationBehavior:NSWindowAnimationBehaviorUtilityWindow];
 
+#endif
         createdWindow = window;
     } else {
         QNSWindow *window;
@@ -1397,8 +1459,10 @@
         createdWindow = window;
     }
 
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
     if ([createdWindow respondsToSelector:@selector(setRestorable:)])
         [createdWindow setRestorable: NO];
+#endif
 
     NSInteger level = windowLevel(flags);
     [createdWindow setLevel:level];
@@ -1499,11 +1563,17 @@
     }
 
     if ((m_synchedWindowState & Qt::WindowFullScreen) != (newState & Qt::WindowFullScreen)) {
+        bool fakeFullScreen = true;
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
+
         if (window()->flags() & Qt::WindowFullscreenButtonHint) {
+            fakeFullScreen = false;
             if (m_effectivelyMaximized && m_synchedWindowState == Qt::WindowFullScreen)
                 predictedState = Qt::WindowMaximized;
             [m_nsWindow toggleFullScreen : m_nsWindow];
-        } else {
+        }
+#endif
+        if (fakeFullScreen) {
             if (newState & Qt::WindowFullScreen) {
                 QScreen *screen = window()->screen();
                 if (screen) {
@@ -1677,6 +1747,7 @@
 
 qreal QCocoaWindow::devicePixelRatio() const
 {
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_7
     // The documented way to observe the relationship between device-independent
     // and device pixels is to use one for the convertToBacking functions. Other
     // methods such as [NSWindow backingScaleFacor] might not give the correct
@@ -1684,6 +1755,9 @@
     // or ignored by the OpenGL driver.
     NSSize backingSize = [m_contentView convertSizeToBacking:NSMakeSize(1.0, 1.0)];
     return backingSize.height;
+#else
+    return 1.0;
+#endif
 }
 
 // Returns whether the window can be expose, which it can
