--- src/modules/macosx/module-coreaudio-device.c.old	2016-01-18 11:14:20.000000000 +0100
+++ src/modules/macosx/module-coreaudio-device.c	2016-02-23 00:53:21.000000000 +0100
@@ -376,23 +376,23 @@ static int ca_sink_set_state(pa_sink *s,
 }
 
 /* Caveat: The caller is responsible to get rid of the CFString(Ref). */
-static bool CFString_to_cstr_n(CFStringRef cfstr, char *buf, long n) {
-    bool ret;
-
-    pa_assert (buf);
-
-    ret = false;
+static char * CFString_to_cstr(CFStringRef cfstr) {
+    char *ret = NULL;
 
     if (cfstr != NULL) {
         const char *tmp = CFStringGetCStringPtr(cfstr, kCFStringEncodingUTF8);
+        CFIndex n = CFStringGetLength(cfstr) + 1 /* for the terminating NULL */;
+
+        ret = pa_xmalloc(n);
 
         if (tmp == NULL) {
-            if (CFStringGetCString(cfstr, buf, n, kCFStringEncodingUTF8))
-                ret = true;
+            if (!CFStringGetCString(cfstr, ret, n, kCFStringEncodingUTF8)) {
+                pa_xfree(ret);
+                ret = NULL;
+            }
         } else {
-            strncpy(buf, tmp, n);
-            buf[n - 1] = 0;
-            ret = true;
+            strncpy(ret, tmp, n - 1);
+            ret[n - 1] = '\0';
         }
     }
 
@@ -408,7 +408,7 @@ static int ca_device_create_sink(pa_modu
     coreaudio_sink *ca_sink;
     pa_sink *sink;
     unsigned int i;
-    char tmp[255];
+    char *tmp;
     pa_strbuf *strbuf;
     AudioObjectPropertyAddress property_address;
     CFStringRef tmp_cfstr = NULL;
@@ -425,23 +425,24 @@ static int ca_device_create_sink(pa_modu
         property_address.mSelector = kAudioObjectPropertyElementName;
         property_address.mScope = kAudioDevicePropertyScopeOutput;
         property_address.mElement = channel_idx + i + 1;
-        size = sizeof(tmp);
+        size = sizeof(tmp_cfstr);
         err = AudioObjectGetPropertyData(u->object_id, &property_address, 0, NULL, &size, &tmp_cfstr);
         if (err == 0) {
-            err = !(CFString_to_cstr_n(tmp_cfstr, tmp, sizeof(tmp)));
+            tmp = CFString_to_cstr(tmp_cfstr);
 
-            if (tmp_cfstr) {
+            if (tmp_cfstr)
                 CFRelease(tmp_cfstr);
-            }
         }
 
-        if (err || !strlen(tmp))
-            snprintf(tmp, sizeof(tmp), "Channel %d", (int) property_address.mElement);
-
         if (i > 0)
             pa_strbuf_puts(strbuf, ", ");
 
-        pa_strbuf_puts(strbuf, tmp);
+        if (err || !tmp || !strlen(tmp))
+            pa_strbuf_printf(strbuf, "Channel %d", (int) property_address.mElement);
+        else
+            pa_strbuf_puts(strbuf, tmp);
+
+        pa_xfree(tmp);
     }
 
     ca_sink->name = pa_strbuf_to_string_free(strbuf);
@@ -535,7 +536,7 @@ static int ca_device_create_source(pa_mo
     coreaudio_source *ca_source;
     pa_source *source;
     unsigned int i;
-    char tmp[255];
+    char *tmp;
     pa_strbuf *strbuf;
     AudioObjectPropertyAddress property_address;
     CFStringRef tmp_cfstr = NULL;
@@ -552,23 +553,24 @@ static int ca_device_create_source(pa_mo
         property_address.mSelector = kAudioObjectPropertyElementName;
         property_address.mScope = kAudioDevicePropertyScopeInput;
         property_address.mElement = channel_idx + i + 1;
-        size = sizeof(tmp);
+        size = sizeof(tmp_cfstr);
         err = AudioObjectGetPropertyData(u->object_id, &property_address, 0, NULL, &size, &tmp_cfstr);
         if (err == 0) {
-            err = !(CFString_to_cstr_n(tmp_cfstr, tmp, sizeof(tmp)));
+            tmp = CFString_to_cstr(tmp_cfstr);
 
-            if (tmp_cfstr) {
+            if (tmp_cfstr)
                 CFRelease(tmp_cfstr);
-            }
         }
 
-        if (err || !strlen(tmp))
-            snprintf(tmp, sizeof(tmp), "Channel %d", (int) property_address.mElement);
-
         if (i > 0)
             pa_strbuf_puts(strbuf, ", ");
 
-        pa_strbuf_puts(strbuf, tmp);
+        if (err || !tmp || !strlen(tmp))
+            pa_strbuf_printf(strbuf, "Channel %d", (int) property_address.mElement);
+        else
+            pa_strbuf_puts(strbuf, tmp);
+
+        pa_xfree(tmp);
     }
 
     ca_source->name = pa_strbuf_to_string_free(strbuf);
