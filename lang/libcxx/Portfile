PortSystem              1.0
PortGroup               compiler_blacklist_versions 1.0

name                    libcxx
epoch                   1
version                 7.0.0
categories              lang
platforms               darwin
license                 MIT NCSA
maintainers             {jeremyhu @jeremyhu}
description             libc++ is a new implementation of the C++ standard library with support for C++11 and portions of C++14.
long_description        ${description} \
                        Because objects cannot be passed between different versions of the C++ runtime, this port must \
                        replace the host version in order to be used.  On Snow Leopard and earlier, this is done \
                        automatically because there is no existing host version of this library.  On Lion and later, \
                        users must build the port with +replacemnt_libcxx and install the root manually if they wish \
                        to replace the existing host implementation.

homepage                http://libcxx.llvm.org/

master_sites            http://www.llvm.org/releases/${version}/
dist_subdir             llvm

use_xz                  yes

set libcxxabi_distname  libcxxabi-${version}.src
set libcxx_distname     libcxx-${version}.src

distfiles               ${libcxxabi_distname}${extract.suffix} \
                        ${libcxx_distname}${extract.suffix}

checksums               libcxxabi-7.0.0.src.tar.xz \
                        rmd160  d4a932989597e58f7a3f24cd67f8886b93c184d7 \
                        sha256  9b45c759ff397512eae4d938ff82827b1bd7ccba49920777e5b5e460baeb245f \
                        size    535792 \
                        libcxx-7.0.0.src.tar.xz \
                        rmd160  7dfefd22edb305f68882a5f503f31c881fe5dc05 \
                        sha256  9b342625ba2f4e65b52764ab2061e116c0337db2179c6bce7f9a0d70c52134f0 \
                        size    1652496

variant universal {}
variant emulated_tls description {build libcxxabi and libcxx with support for emulated thread_local storage} {}
variant replacemnt_libcxx description {EXPERTS ONLY: Build a replacement libcxxabi and libcxx even if it is already part of the base OS.} {}

if {${os.major} < 18} {
  default_variants +universal
}
if {${os.major} < 11} {
  # requires a TLS-enabled clang-5.0 or better to build
  if {[file exists ${prefix}/bin/clang-mp-5.0] || [file exists ${prefix}/bin/clang-mp-6.0] || [file exists ${prefix}/bin/clang-mp-7.0]} {
    default_variants-append +emulated_tls
  }
}
use_configure no

set roots_path ${prefix}/var/system_roots/
set root_name  ${name}-${version}-${revision}

set libcxxabi_worksrcpath   [file join ${workpath} ${libcxxabi_distname}]
set libcxx_worksrcpath      [file join ${workpath} ${libcxx_distname}]

platform darwin {
    if {${os.major} < 9} {
        pre-fetch {
            ui_error "${name} is not supported on Tiger or earlier."
            error "unsupported platform"
        }
    }

    if {${os.major} < 11} {
        post-activate {
            set dirs /
            if {${os.subplatform} eq "macosx"} {
                lappend dirs ${developer_dir}/SDKs/MacOSX${macosx_version}.sdk
            }
            foreach d ${dirs} {
                system -W ${d} "tar xzf ${roots_path}/${root_name}.tgz"
            }
        }
    }
}

if {${os.major} < 11 || [variant_isset replacemnt_libcxx]} {

    supported_archs i386 x86_64 ppc

    # clang 3.5 and newer are conditionally blacklisted to prevent dependency cycles
    foreach ver {3.5 3.6 3.7 3.8 3.9 4.0 5.0 6.0 7.0 devel} {
        if {![file exists ${prefix}/bin/clang-mp-${ver}]} {
            compiler.blacklist-append macports-clang-${ver}
        }
    }

    # clang 3.8 and newer are blacklisted due to a build failure in stdlib.h that needs to ne triaged
    # this has been somewhat sorted out.
    # clang-3.4 or clang-3.7 need the following include dir to build the library: -I${libcxx_worksrcpath}/include
    # clang-3.9, clang-4.0: neither include dir individually will work, both don't work -- these compilers cannot presently build this library with the buildit script
    # clang-5.0, clang-6.0, clang-7.0  need the following include dir to build the library: -I${libcxxabi_worksrcpath}/include

	set includedirs {}

    if {[file exists /usr/lib/libc++.dylib]} {

		if {[variant_isset emulated_tls]} {
			# for this, we need a TLS-capable compiler, and only a TLS-capable compiler
			compiler.whitelist macports-clang-7.0 macports-clang-6.0 macports-clang-5.0 {clang > 800 }
			compiler.fallback
			set includedirs -I${libcxxabi_worksrcpath}/include
		} else {
			# we have libc++, we don't want emulated tls -- we're just trying to upgrade
			compiler.blacklist *gcc* {clang < 500} macports-clang-3.4 macports-clang-3.7 macports-clang-3.9 macports-clang-4.0
			set includedirs -I${libcxxabi_worksrcpath}/include
		}

    } else {

        # we are bootstrapping libc++ into a system without it
        foreach ver {3.7 3.8 3.9 4.0 5.0 6.0 7.0 devel} {
          compiler.blacklist-append macports-clang-${ver}
        }
        compiler.whitelist macports-clang-3.4
        compiler.fallback
        set includedirs -I${libcxx_worksrcpath}/include

    }


    # we already have libc++ installed, but now we're building a universal version with PPC slice
    # we can improve on this plan with more testing -- most likely clang-7.0 would be best
    # but will need a fat set of supporting libraries
    if {[variant_isset universal] && [lsearch ${universal_archs} ppc] != -1} {
        # http://trac.macports.org/wiki/LibcxxOnOlderSystems#Leopardppc
        compiler.whitelist macports-clang-3.7 
        compiler.fallback
        set includedirs -I${libcxx_worksrcpath}/include
    }

    post-extract {
        # delete cxa_noexception.cpp as we're not using the cmake build system
        # cmake would choose either cxa_exceptions or cxa_noexceptions
        # but the buildit script just builds every file in the src directory and you can't have both
        delete ${libcxxabi_worksrcpath}/src/cxa_noexception.cpp

    if {![variant_isset emulated_tls]} {
        # cmake doesn't include this for darwin builds, so nuke it here as well
        # however, this file is essential for emulated-tls to function
        delete ${libcxxabi_worksrcpath}/src/cxa_thread_atexit.cpp
    }

        file mkdir ${workpath}/build
        file copy ${filespath}/Makefile ${workpath}/build
    }

    patch.dir ${workpath}
    patch.pre_args -p0
    patchfiles-append \
        0001-Update-buildit-script-to-read-EXTRA_LDFLAGS-from-the.patch \
        0002-Define-_LIBCPP_BUILDING_LIBRARY-during-build-to-supp.patch \
        0003-buildit-Use-undefined-dynamic_lookup-when-linking.patch \
        3001-Fix-local-and-iterator-when-building-with-Lion-and-n.patch \
        3002-Fix-missing-long-long-math-prototypes-when-using-the.patch \
        3003-implement-atomic-using-mutex-lock_guard-for-64b-ops-.patch \
        3004-Revert-Remove-the-buildit-and-testit-scripts-they-ha.patch \
        3005-buildit-build-fix-for-Leopard.patch \
        3006-buildit-Set-compatibility-version-to-RC_ProjectSourc.patch \
        3007-MacPorts-Use-LIBCXXABI_PATH-for-path-to-build-time-l.patch \
        3008-buildit-Fix-CFLAGS-for-Leopard-and-Snow-Leopard-to-i.patch


    if {[variant_isset emulated_tls]} {
      # KEN this patch is essential to get a fully-functioning emulated tls system
      # it addes the rest of emutls.o to the library
      patchfiles-append \
          4001-patch-libcxxabi-add-libclang_rt_osx.diff
    }

    post-patch {
      if {[variant_isset emulated_tls]} {
        reinplace "s|@@prefix@@|${prefix}|g" ${libcxxabi_worksrcpath}/lib/buildit
      }
      system "chmod 755 ${libcxx_worksrcpath}/lib/buildit"
    }

	set cxx_stdlibflags {}
	if {[string match *clang* ${configure.cxx}]} {
		set cxx_stdlibflags -stdlib=${configure.cxx_stdlib}
	}

    build.dir ${workpath}/build
    build.env-append \
        CC="${configure.cc}" \
        CXX="${configure.cxx} ${cxx_stdlibflags}"  \
        RC_XBS=1 \
        RC_ProjectSourceVersion="${version}" \
        RC_CFLAGS="[get_canonical_archflags] ${includedirs}  ${configure.optflags}" \
        TRIPLE="-apple-darwin${os.major}"
    build.args-append \
        LIBCXXABI_PATH=${libcxxabi_worksrcpath} \
        LIBCXX_PATH=${libcxx_worksrcpath} \
        LIBCXXABI_DYLIB_PATH=${build.dir}/libc++abi.dylib \
        TRIPLE=-apple-darwin${os.major} \
        MACOSX_DEPLOYMENT_TARGET=${macosx_deployment_target}

    # We want to use the host's libc++ everywhere because we want to ensure
    # that only *ONE* copy of this library is in any process's address space.
    # On Snow Leopard and earlier, this port provides this library in /usr for
    # binary compatibility with Lion and later.
    #
    # On newer OS version, this port does not install the content to /usr and
    # just leaves it to expert users who may want to replace their system
    # runtime.

    destroot {
        xinstall -m 755 -d ${destroot}${roots_path}/${root_name}/usr/lib

        xinstall -m 755 ${libcxxabi_worksrcpath}/lib/libc++abi.dylib ${destroot}${roots_path}/${root_name}/usr/lib

        xinstall -m 755 ${libcxx_worksrcpath}/lib/libc++.1.dylib ${destroot}${roots_path}/${root_name}/usr/lib
        ln -s libc++.1.dylib ${destroot}${roots_path}/${root_name}/usr/lib/libc++.dylib

        system -W ${destroot}${roots_path}/${root_name} "tar czf ../${root_name}.tgz ."
        delete ${destroot}${roots_path}/${root_name}
    }
} else {
    distfiles
    fetch {}
    build {}
    destroot {
        xinstall -d ${destroot}${prefix}/share/doc/${name}
        system "echo ${name} is an empty port on this OS version because the functionality is already provided by the OS. > ${destroot}${prefix}/share/doc/${name}/README.txt"
    }
}

livecheck.type none
